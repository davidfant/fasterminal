{
   "name": "The stupid content tracker",
   "subcommands": {
      "add": {
         "name": "Add file contents to the index"
      },
      "am": {
         "name": "Apply a series of patches from a mailbox"
      },
      "archive": {
         "name": "Create an archive of files from a named tree"
      },
      "bisect": {
         "name": "Use binary search to find the commit that introduced a bug"
      },
      "branch": {
         "name": "List, create, or delete branches"
      },
      "bundle": {
         "name": "Move objects and refs by archive"
      },
      "checkout": {
         "name": "Switch branches or restore working tree files"
      },
      "cherry-pick": {
         "name": "Apply the changes introduced by some existing commits"
      },
      "citool": {
         "name": "Graphical alternative to git-commit"
      },
      "clean": {
         "name": "Remove untracked files from the working tree"
      },
      "clone": {
         "name": "Clone a repository into a new directory"
      },
      "commit": {
         "name": "Record changes to the repository"
      },
      "describe": {
         "name": "Give an object a human readable name based on an available ref"
      },
      "diff": {
         "name": "Show changes between commits, commit and working tree, etc"
      },
      "fetch": {
         "name": "Download objects and refs from another repository"
      },
      "format-patch": {
         "name": "Prepare patches for e-mail submission"
      },
      "gc": {
         "name": "Cleanup unnecessary files and optimize the local repository"
      },
      "gitk": {
         "name": "The Git repository browser"
      },
      "grep": {
         "name": "Print lines matching a pattern"
      },
      "gui": {
         "name": "A portable graphical interface to Git"
      },
      "init": {
         "name": "Create an empty Git repository or reinitialize an existing one"
      },
      "log": {
         "name": "Show commit logs"
      },
      "merge": {
         "name": "Join two or more development histories together"
      },
      "mv": {
         "name": "Move or rename a file, a directory, or a symlink"
      },
      "notes": {
         "name": "Add or inspect object notes"
      },
      "pull": {
         "name": "Fetch from and integrate with another repository or a local branch"
      },
      "push": {
         "name": "Update remote refs along with associated objects"
      },
      "range-diff": {
         "name": "Compare two commit ranges (e.g. two versions of a branch)"
      },
      "rebase": {
         "name": "Reapply commits on top of another base tip"
      },
      "reset": {
         "name": "Reset current HEAD to the specified state"
      },
      "restore": {
         "name": "Restore working tree files"
      },
      "revert": {
         "name": "Revert some existing commits"
      },
      "rm": {
         "name": "Remove files from the working tree and from the index"
      },
      "shortlog": {
         "name": "Summarize 'git log' output"
      },
      "show": {
         "name": "Show various types of objects"
      },
      "stash": {
         "name": "Stash the changes in a dirty working directory away"
      },
      "status": {
         "name": "Show the working tree status"
      },
      "submodule": {
         "name": "Initialize, update or inspect submodules"
      },
      "switch": {
         "name": "Switch branches"
      },
      "tag": {
         "name": "Create, list, delete or verify a tag object signed with GPG"
      },
      "worktree": {
         "name": "Manage multiple working trees"
      },
      "config": {
         "name": "Get and set repository or global options"
      },
      "fast-export": {
         "name": "Git data exporter"
      },
      "fast-import": {
         "name": "Backend for fast Git data importers"
      },
      "filter-branch": {
         "name": "Rewrite branches"
      },
      "mergetool": {
         "name": "Run merge conflict resolution tools to resolve merge conflicts"
      },
      "pack-refs": {
         "name": "Pack heads and tags for efficient repository access"
      },
      "prune": {
         "name": "Prune all unreachable objects from the object database"
      },
      "reflog": {
         "name": "Manage reflog information"
      },
      "remote": {
         "name": "Manage set of tracked repositories"
      },
      "repack": {
         "name": "Pack unpacked objects in a repository"
      },
      "replace": {
         "name": "Create, list, delete refs to replace objects"
      },
      "annotate": {
         "name": "Annotate file lines with commit information"
      },
      "blame": {
         "name": "Show what revision and author last modified each line of a file"
      },
      "count-objects": {
         "name": "Count unpacked number of objects and their disk consumption"
      },
      "difftool": {
         "name": "Show changes using common diff tools"
      },
      "fsck": {
         "name": "Verifies the connectivity and validity of the objects in the database"
      },
      "gitweb": {
         "name": "Git web interface (web frontend to Git repositories)"
      },
      "help": {
         "name": "Display help information about Git"
      },
      "instaweb": {
         "name": "Instantly browse your working repository in gitweb"
      },
      "merge-tree": {
         "name": "Show three-way merge without touching index"
      },
      "rerere": {
         "name": "Reuse recorded resolution of conflicted merges"
      },
      "show-branch": {
         "name": "Show branches and their commits"
      },
      "verify-commit": {
         "name": "Check the GPG signature of commits"
      },
      "verify-tag": {
         "name": "Check the GPG signature of tags"
      },
      "whatchanged": {
         "name": "Show logs with difference each commit introduces"
      },
      "archimport": {
         "name": "Import a GNU Arch repository into Git"
      },
      "cvsexportcommit": {
         "name": "Export a single commit to a CVS checkout"
      },
      "cvsimport": {
         "name": "Salvage your data out of another SCM people love to hate"
      },
      "cvsserver": {
         "name": "A CVS server emulator for Git"
      },
      "imap-send": {
         "name": "Send a collection of patches from stdin to an IMAP folder"
      },
      "quiltimport": {
         "name": "Applies a quilt patchset onto the current branch"
      },
      "request-pull": {
         "name": "Generates a summary of pending changes"
      },
      "send-email": {
         "name": "Send a collection of patches as emails"
      },
      "svn": {
         "name": "Bidirectional operation between a Subversion repository and Git"
      },
      "apply": {
         "name": "Apply a patch to files and/or to the index"
      },
      "checkout-index": {
         "name": "Copy files from the index to the working tree"
      },
      "commit-graph": {
         "name": "Write and verify Git commit-graph files"
      },
      "commit-tree": {
         "name": "Create a new commit object"
      },
      "hash-object": {
         "name": "Compute object ID and optionally creates a blob from a file"
      },
      "index-pack": {
         "name": "Build pack index file for an existing packed archive"
      },
      "merge-file": {
         "name": "Run a three-way file merge"
      },
      "merge-index": {
         "name": "Run a merge for files needing merging"
      },
      "mktag": {
         "name": "Creates a tag object"
      },
      "mktree": {
         "name": "Build a tree-object from ls-tree formatted text"
      },
      "multi-pack-index": {
         "name": "Write and verify multi-pack-indexes"
      },
      "pack-objects": {
         "name": "Create a packed archive of objects"
      },
      "prune-packed": {
         "name": "Remove extra objects that are already in pack files"
      },
      "read-tree": {
         "name": "Reads tree information into the index"
      },
      "symbolic-ref": {
         "name": "Read, modify and delete symbolic refs"
      },
      "unpack-objects": {
         "name": "Unpack objects from a packed archive"
      },
      "update-index": {
         "name": "Register file contents in the working tree to the index"
      },
      "update-ref": {
         "name": "Update the object name stored in a ref safely"
      },
      "write-tree": {
         "name": "Create a tree object from the current index"
      },
      "cat-file": {
         "name": "Provide content or type and size information for repository objects"
      },
      "cherry": {
         "name": "Find commits yet to be applied to upstream"
      },
      "diff-files": {
         "name": "Compares files in the working tree and the index"
      },
      "diff-index": {
         "name": "Compare a tree to the working tree or index"
      },
      "diff-tree": {
         "name": "Compares the content and mode of blobs found via two tree objects"
      },
      "for-each-ref": {
         "name": "Output information on each ref"
      },
      "get-tar-commit-id": {
         "name": "Extract commit ID from an archive created using git-archive"
      },
      "ls-files": {
         "name": "Show information about files in the index and the working tree"
      },
      "ls-remote": {
         "name": "List references in a remote repository"
      },
      "ls-tree": {
         "name": "List the contents of a tree object"
      },
      "merge-base": {
         "name": "Find as good common ancestors as possible for a merge"
      },
      "name-rev": {
         "name": "Find symbolic names for given revs"
      },
      "pack-redundant": {
         "name": "Find redundant pack files"
      },
      "rev-list": {
         "name": "Lists commit objects in reverse chronological order"
      },
      "rev-parse": {
         "name": "Pick out and massage parameters"
      },
      "show-index": {
         "name": "Show packed archive index"
      },
      "show-ref": {
         "name": "List references in a local repository"
      },
      "unpack-file": {
         "name": "Creates a temporary file with a blob's contents"
      },
      "var": {
         "name": "Show a Git logical variable"
      },
      "verify-pack": {
         "name": "Validate packed Git archive files"
      },
      "daemon": {
         "name": "A really simple server for Git repositories"
      },
      "fetch-pack": {
         "name": "Receive missing objects from another repository"
      },
      "http-backend": {
         "name": "Server side implementation of Git over HTTP"
      },
      "send-pack": {
         "name": "Push objects over Git protocol to another repository"
      },
      "update-server-info": {
         "name": "Update auxiliary info file to help dumb servers"
      },
      "check-attr": {
         "name": "Display gitattributes information"
      },
      "check-ignore": {
         "name": "Debug gitignore / exclude files"
      },
      "check-mailmap": {
         "name": "Show canonical names and email addresses of contacts"
      },
      "check-ref-format": {
         "name": "Ensures that a reference name is well formed"
      },
      "column": {
         "name": "Display data in columns"
      },
      "credential": {
         "name": "Retrieve and store user credentials"
      },
      "credential-cache": {
         "name": "Helper to temporarily store passwords in memory"
      },
      "credential-store": {
         "name": "Helper to store credentials on disk"
      },
      "fmt-merge-msg": {
         "name": "Produce a merge commit message"
      },
      "interpret-trailers": {
         "name": "Add or parse structured information in commit messages"
      },
      "mailinfo": {
         "name": "Extracts patch and authorship from a single e-mail message"
      },
      "mailsplit": {
         "name": "Simple UNIX mbox splitter program"
      },
      "merge-one-file": {
         "name": "The standard helper program to use with git-merge-index"
      },
      "patch-id": {
         "name": "Compute unique ID for a patch"
      },
      "sh-setup": {
         "name": "Common Git shell script setup code"
      },
      "stripspace": {
         "name": "Remove unnecessary whitespace"
      }
   }
}